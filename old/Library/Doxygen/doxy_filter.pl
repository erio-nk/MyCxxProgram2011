# Doxygen用フィルタリングスクリプト
#
# Doxygen(Javadocベース)形式の複数行コメントを見つけたら、
# 行末にDoxygenの改行マーク(@n)を入れる。
#
# また、メンバ変数とかマクロとかの後ろに"///"というコメントを
# 見つけたら、"///<"に置換する。
#
# >perl doxy_filter.pl file_name
#
# Doxygenでは、confのINPUT_FILTERを以下の様に設定する。
# >INPUT_FILTER = "perl doxy_filter.pl"


$com = 0;	# コメント
$det = 0;	# "詳細"開始
$at = 0;	# 前の行は@でした
$code = 0;	# @code 〜 @endcode中です

@buf;


$i = 0;
open(IN, $ARGV[0]);
while (<IN>) {
	if ($com == 0) {
		# 通常の部分
		if ($_ =~ /^\s*\/\*[\*!].*/) {
			# ドキュメンテーションコメント開始
			$com = 1;
			$det = 0;
			$at = 0;
			$code = 0;
		}
		# メンバ変数の後ろの1行ドキュメンテーションコメント	
		elsif ($_ =~ /^\s*(class\s+|struct\s+|)(const\s+|)(unsigned\s+|signed\s+|)([\w\d_:\<\>]+|[\w\d_]+\s+[\w\d_]+)(\**|&)\s+[\w\d_]+;\s*\/\/[\/!][^<].*/) {
			$_ =~ s/(\/\/\/|\/\/!)/$1</;	# //!< に置き換える
		}
		# defineマクロの後ろの1行ドキュメンテーションコメント
		elsif ($_ =~ /^\s*\#define\s+[\w\d_]+\s+[\w\d_\(\)]+\s*\/\/\/[^<].*/) {
			$_ =~ s/(\/\/\/|\/\/!)/$1</;
		}
		# typedefの後ろの1行ドキュメンテーションコメント	
		elsif ($_ =~ /^\s*typedef\s+([\w\d_:\<\>]+|[\w\d_]+\s+[\w\d_]+)\**\s+[\w\d_]+;\s*\/\/\/[^<].*/) {
			$_ =~ s/(\/\/\/|\/\/!)/$1</;
		}
	} else {
		# ドキュメンテーションコメント内
		if ($_ =~ /.*\*\/[\s\r\n]*$/) {
			# ドキュメンテーションコメント終了
			$com = 0;
		} else {
			if ($_ =~ /^(\s*|\s*\*)\s*\@.*/) {	# *で始まるJavadocなコメント(\s*\*)と、空白だけのQtのコメント(\s*)両方サポート
				# @〜で始まるタグ
				if ($_ =~ /.*\@code.*/) {
					# @code
					$code = 1;

					$buf[$i-1] =~ s/(サンプル)/<b>$1<\/b>/;
						# 前の行に"サンプル"とあったら目立たせてみる。
				}
				elsif ($_ =~ /.*\@endcode.*/) {
					# @endcode
					$code = 0;
				}
				else {
					$at = 1;
				}
			} else {
				if ($_ =~ /^(\s*|\s*\*)\s*$/) {
					# 空行
					$det = 1;	# ひとつ空行を見つけたら以降は詳細とみなす
				}
				elsif ($_ =~ /^(\s*|\s*\*)\s*.*$/) {
					# @の文は複数行でした
					if ($at == 1) {
						# @の文末にも改行付けます。
						$buf[$i-1] =~ s/(\n|\r\n)/\@n$1/;
					}
					
					if ($code == 0) {
						# 文
						if ($det == 1) {
							# 詳細なら後ろに改行マークを付ける
							$_ =~ s/(\n|\r\n)/\@n$1/;
						}
					}
					elsif ($code == 1) {
						# コード。先頭のタブを1個取り除く。
						$_ =~ s/(^\s*|^\s*\*)\t\t/$1\t/;
					}
				}
				$at = 0;
			}
		}
	}
	#print $_;
	$buf[$i] = $_;
	$i++;
}

foreach (@buf) {
	print $_;
}
close(IN);